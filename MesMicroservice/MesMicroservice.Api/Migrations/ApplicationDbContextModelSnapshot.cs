// <auto-generated />
using System;
using MesMicroservice.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MesMicroservice.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("areaeq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("enterpriseeq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("hierarchymodeleq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("manufacturingordereq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("manufacturingrecordeq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("materialuniteq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("operationeq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("resourceeq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("resourcenetworkconnectioneq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("resourcerelationshipnetworkeq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("siteeq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("workcentereq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("workcenteroutputeq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("workordereq", "application")
                .IncrementsBy(10);

            modelBuilder.HasSequence("workuniteq", "application")
                .IncrementsBy(10);

            modelBuilder.Entity("EquipmentManufacturingRecord", b =>
                {
                    b.Property<int>("EquipmentsId")
                        .HasColumnType("int");

                    b.Property<int>("ManufacturingRecordId")
                        .HasColumnType("int");

                    b.HasKey("EquipmentsId", "ManufacturingRecordId");

                    b.HasIndex("ManufacturingRecordId");

                    b.ToTable("EquipmentManufacturingRecord");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.HierarchyModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "workuniteq", "application");

                    b.Property<string>("HierarchyModelId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("HierarchyModelId");

                    b.ToTable("HierarchyModel");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.ManufacturingOrderAggregate.ManufacturingOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "manufacturingordereq", "application");

                    b.Property<DateTime>("AvailableDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ManufacturingOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("MaterialDefinitionId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(30, 8)
                        .HasColumnType("decimal(30,8)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturingOrderId")
                        .IsUnique();

                    b.HasIndex("MaterialDefinitionId");

                    b.ToTable("ManufacturingOrders");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.ManufacucturingRecordAggregate.ManufacturingRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "manufacturingrecordeq", "application");

                    b.Property<decimal>("Defects")
                        .HasPrecision(30, 8)
                        .HasColumnType("decimal(30,8)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Output")
                        .HasPrecision(30, 8)
                        .HasColumnType("decimal(30,8)");

                    b.Property<int>("OutputMaterialDefinitionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OutputMaterialDefinitionId");

                    b.HasIndex("WorkOrderId", "StartTime")
                        .IsUnique();

                    b.ToTable("ManufacturingRecords");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.MaterialUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "materialuniteq", "application");

                    b.Property<decimal>("ConversionValueToPrimaryUnit")
                        .HasPrecision(30, 8)
                        .HasColumnType("decimal(30,8)");

                    b.Property<int>("MaterialDefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("UnitId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialDefinitionId");

                    b.HasIndex("UnitId", "MaterialDefinitionId")
                        .IsUnique();

                    b.ToTable("MaterialUnit");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.Operation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "operationeq", "application");

                    b.Property<int>("MaterialDefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("OperationId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialDefinitionId");

                    b.HasIndex("OperationId", "MaterialDefinitionId")
                        .IsUnique();

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.OperationEquipmentRequirement", b =>
                {
                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentClassId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OperationId", "EquipmentClassId");

                    b.HasIndex("EquipmentClassId");

                    b.ToTable("OperationEquipmentRequirement");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.Resource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "resourceeq", "application");

                    b.Property<string>("ResourceId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ResourceId")
                        .IsUnique();

                    b.ToTable("Resources");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.ResourceRelationshipNetworkAggregate.ResourceRelationshipNetwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "resourcerelationshipnetworkeq", "application");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RelationshipForm")
                        .HasColumnType("int");

                    b.Property<int>("RelationshipType")
                        .HasColumnType("int");

                    b.Property<string>("ResourceRelationshipNetworkId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ResourceRelationshipNetworkId")
                        .IsUnique();

                    b.ToTable("ResourceRelationshipNetworks");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.WorkCenterOutputAggregate.WorkCenterOutput", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "workcenteroutputeq", "application");

                    b.Property<int>("MaterialDefinitionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Output")
                        .HasPrecision(30, 8)
                        .HasColumnType("decimal(30,8)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.Property<int>("WorkCenterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MaterialDefinitionId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WorkCenterId", "MaterialDefinitionId")
                        .IsUnique();

                    b.ToTable("WorkCenterOutputs");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.WorkOrderAggregate.EquipmentWorkOrder", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.HasKey("WorkOrderId", "EquipmentId");

                    b.ToTable("EquipmentWorkOrder");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.WorkOrderAggregate.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseHiLo(b.Property<int>("Id"), "workordereq", "application");

                    b.Property<DateTime?>("ActuallyEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActuallyStartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ManufacturingOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductionTarget")
                        .HasPrecision(30, 8)
                        .HasColumnType("decimal(30,8)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WorkCenterId")
                        .HasColumnType("int");

                    b.Property<string>("WorkOrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("WorkOrderStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkCenterId");

                    b.HasIndex("ManufacturingOrderId", "WorkOrderId")
                        .IsUnique();

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.WorkOrderAggregate.WorkOrderEquipmentRequirement", b =>
                {
                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentClassId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("WorkOrderId", "EquipmentClassId");

                    b.HasIndex("EquipmentClassId");

                    b.ToTable("WorkOrderEquipmentRequirement");
                });

            modelBuilder.Entity("OperationOperation", b =>
                {
                    b.Property<int>("OperationId")
                        .HasColumnType("int");

                    b.Property<int>("PrerequisiteOperationId")
                        .HasColumnType("int");

                    b.HasKey("OperationId", "PrerequisiteOperationId");

                    b.HasIndex("PrerequisiteOperationId");

                    b.ToTable("OperationOperation");
                });

            modelBuilder.Entity("WorkOrderWorkOrder", b =>
                {
                    b.Property<int>("PrerequisiteOperationsId")
                        .HasColumnType("int");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("int");

                    b.HasKey("PrerequisiteOperationsId", "WorkOrderId");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderWorkOrder");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.Area", b =>
                {
                    b.HasBaseType("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.HierarchyModel");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasIndex("ParentId");

                    b.ToTable("Areas", (string)null);
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.Enterprise", b =>
                {
                    b.HasBaseType("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.HierarchyModel");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasIndex("ParentId");

                    b.ToTable("Enterprises", (string)null);
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.Site", b =>
                {
                    b.HasBaseType("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.HierarchyModel");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasIndex("ParentId");

                    b.ToTable("Sites", (string)null);
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.WorkCenter", b =>
                {
                    b.HasBaseType("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.HierarchyModel");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("WorkCenterType")
                        .HasColumnType("int");

                    b.HasIndex("ParentId");

                    b.ToTable("WorkCenters", (string)null);
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.WorkUnit", b =>
                {
                    b.HasBaseType("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.HierarchyModel");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasIndex("ParentId");

                    b.ToTable("WorkUnits", (string)null);
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.EquipmentAggregate.Equipment", b =>
                {
                    b.HasBaseType("MesMicroservice.Domain.AggregateModels.Resource");

                    b.Property<int>("EquipmentClassId")
                        .HasColumnType("int");

                    b.Property<int?>("HierarchyModelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasIndex("EquipmentClassId");

                    b.HasIndex("HierarchyModelId");

                    b.ToTable("Equipment", (string)null);
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.EquipmentClassAggregate.EquipmentClass", b =>
                {
                    b.HasBaseType("MesMicroservice.Domain.AggregateModels.Resource");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.ToTable("EquipmentClass", (string)null);
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.MaterialClassAggregate.MaterialClass", b =>
                {
                    b.HasBaseType("MesMicroservice.Domain.AggregateModels.Resource");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.ToTable("MaterialClass", (string)null);
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.MaterialDefinition", b =>
                {
                    b.HasBaseType("MesMicroservice.Domain.AggregateModels.Resource");

                    b.Property<int>("MaterialClassId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PrimaryUnit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("MaterialClassId");

                    b.ToTable("MaterialDefinition", (string)null);
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.MaterialLotAggregate.MaterialLot", b =>
                {
                    b.HasBaseType("MesMicroservice.Domain.AggregateModels.Resource");

                    b.Property<int>("MaterialDefinitionId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(30, 8)
                        .HasColumnType("decimal(30,8)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasIndex("MaterialDefinitionId");

                    b.HasIndex("UnitId");

                    b.ToTable("MaterialLot", (string)null);
                });

            modelBuilder.Entity("EquipmentManufacturingRecord", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.EquipmentAggregate.Equipment", null)
                        .WithMany()
                        .HasForeignKey("EquipmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.ManufacucturingRecordAggregate.ManufacturingRecord", null)
                        .WithMany()
                        .HasForeignKey("ManufacturingRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.ManufacturingOrderAggregate.ManufacturingOrder", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.MaterialDefinition", "MaterialDefinition")
                        .WithMany()
                        .HasForeignKey("MaterialDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialDefinition");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.ManufacucturingRecordAggregate.ManufacturingRecord", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.MaterialDefinition", "OutputMaterialDefinition")
                        .WithMany()
                        .HasForeignKey("OutputMaterialDefinitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.WorkOrderAggregate.WorkOrder", "WorkOrder")
                        .WithMany("ManufacturingRecords")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("OutputMaterialDefinition");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.MaterialUnit", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.MaterialDefinition", null)
                        .WithMany("SecondaryUnits")
                        .HasForeignKey("MaterialDefinitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.Operation", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.MaterialDefinition", null)
                        .WithMany("Operations")
                        .HasForeignKey("MaterialDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.OperationEquipmentRequirement", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.EquipmentClassAggregate.EquipmentClass", "EquipmentClass")
                        .WithMany()
                        .HasForeignKey("EquipmentClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.Operation", null)
                        .WithMany("EquipmentRequirements")
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentClass");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.ResourceRelationshipNetworkAggregate.ResourceRelationshipNetwork", b =>
                {
                    b.OwnsMany("MesMicroservice.Domain.AggregateModels.ResourceRelationshipNetworkAggregate.ResourceNetworkConnection", "Connections", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseHiLo(b1.Property<int>("Id"), "resourcenetworkconnectioneq", "application");

                            b1.Property<string>("ConnectionId")
                                .IsRequired()
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("FromResourceId")
                                .HasColumnType("int");

                            b1.Property<int>("ResourceRelationshipNetworkId")
                                .HasColumnType("int");

                            b1.Property<int>("ToResourceId")
                                .HasColumnType("int");

                            b1.HasKey("Id");

                            b1.HasIndex("ConnectionId")
                                .IsUnique();

                            b1.HasIndex("FromResourceId");

                            b1.HasIndex("ResourceRelationshipNetworkId");

                            b1.HasIndex("ToResourceId");

                            b1.ToTable("ResourceNetworkConnection");

                            b1.HasOne("MesMicroservice.Domain.AggregateModels.Resource", "FromResource")
                                .WithMany()
                                .HasForeignKey("FromResourceId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ResourceRelationshipNetworkId");

                            b1.HasOne("MesMicroservice.Domain.AggregateModels.Resource", "ToResource")
                                .WithMany()
                                .HasForeignKey("ToResourceId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.OwnsMany("MesMicroservice.Domain.AggregateModels.ResourceRelationshipNetworkAggregate.ResourceNetworkConnectionProperty", "Properties", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("int");

                                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b2.Property<int>("Id"));

                                    b2.Property<int>("ConnectionId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Description")
                                        .IsRequired()
                                        .HasMaxLength(500)
                                        .HasColumnType("nvarchar(500)");

                                    b2.Property<string>("PropertyId")
                                        .IsRequired()
                                        .HasMaxLength(50)
                                        .HasColumnType("nvarchar(50)");

                                    b2.Property<string>("ValueUnitOfMeasure")
                                        .IsRequired()
                                        .HasMaxLength(30)
                                        .HasColumnType("nvarchar(30)");

                                    b2.HasKey("Id");

                                    b2.HasIndex("ConnectionId", "PropertyId")
                                        .IsUnique();

                                    b2.ToTable("ResourceNetworkConnectionProperty");

                                    b2.WithOwner()
                                        .HasForeignKey("ConnectionId");

                                    b2.OwnsOne("MesMicroservice.Domain.AggregateModels.Value", "Value", b3 =>
                                        {
                                            b3.Property<int>("ResourceNetworkConnectionPropertyId")
                                                .HasColumnType("int");

                                            b3.Property<string>("ValueString")
                                                .IsRequired()
                                                .HasColumnType("nvarchar(max)");

                                            b3.Property<int>("ValueType")
                                                .HasColumnType("int");

                                            b3.HasKey("ResourceNetworkConnectionPropertyId");

                                            b3.ToTable("ResourceNetworkConnectionProperty");

                                            b3.WithOwner()
                                                .HasForeignKey("ResourceNetworkConnectionPropertyId");
                                        });

                                    b2.Navigation("Value")
                                        .IsRequired();
                                });

                            b1.Navigation("FromResource");

                            b1.Navigation("Properties");

                            b1.Navigation("ToResource");
                        });

                    b.Navigation("Connections");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.WorkCenterOutputAggregate.WorkCenterOutput", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.MaterialDefinition", "MaterialDefinition")
                        .WithMany()
                        .HasForeignKey("MaterialDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.MaterialUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.WorkCenter", "WorkCenter")
                        .WithMany("Outputs")
                        .HasForeignKey("WorkCenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialDefinition");

                    b.Navigation("Unit");

                    b.Navigation("WorkCenter");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.WorkOrderAggregate.EquipmentWorkOrder", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.EquipmentAggregate.Equipment", "Equipment")
                        .WithMany()
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.WorkOrderAggregate.WorkOrder", "WorkOrder")
                        .WithMany("AssignedEquipments")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.WorkOrderAggregate.WorkOrder", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.ManufacturingOrderAggregate.ManufacturingOrder", "ManufacturingOrder")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ManufacturingOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.WorkCenter", "WorkCenter")
                        .WithMany()
                        .HasForeignKey("WorkCenterId");

                    b.Navigation("ManufacturingOrder");

                    b.Navigation("WorkCenter");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.WorkOrderAggregate.WorkOrderEquipmentRequirement", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.EquipmentClassAggregate.EquipmentClass", "EquipmentClass")
                        .WithMany()
                        .HasForeignKey("EquipmentClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.WorkOrderAggregate.WorkOrder", null)
                        .WithMany("EquipmentRequirements")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EquipmentClass");
                });

            modelBuilder.Entity("OperationOperation", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.Operation", null)
                        .WithMany()
                        .HasForeignKey("OperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.Operation", null)
                        .WithMany()
                        .HasForeignKey("PrerequisiteOperationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkOrderWorkOrder", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.WorkOrderAggregate.WorkOrder", null)
                        .WithMany()
                        .HasForeignKey("PrerequisiteOperationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.WorkOrderAggregate.WorkOrder", null)
                        .WithMany()
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.Area", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.HierarchyModel", null)
                        .WithOne()
                        .HasForeignKey("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.Area", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.Site", "Parent")
                        .WithMany("Areas")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.Enterprise", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.HierarchyModel", null)
                        .WithOne()
                        .HasForeignKey("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.Enterprise", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.HierarchyModel", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.Site", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.HierarchyModel", null)
                        .WithOne()
                        .HasForeignKey("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.Site", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.Enterprise", "Parent")
                        .WithMany("Sites")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.WorkCenter", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.HierarchyModel", null)
                        .WithOne()
                        .HasForeignKey("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.WorkCenter", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.Area", "Parent")
                        .WithMany("WorkCenters")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.WorkUnit", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.HierarchyModel", null)
                        .WithOne()
                        .HasForeignKey("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.WorkUnit", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.WorkCenter", "Parent")
                        .WithMany("WorkUnits")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.EquipmentAggregate.Equipment", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.EquipmentClassAggregate.EquipmentClass", "EquipmentClass")
                        .WithMany("Equipments")
                        .HasForeignKey("EquipmentClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.HierarchyModel", "HierarchyModel")
                        .WithMany("AssociatedEquipments")
                        .HasForeignKey("HierarchyModelId");

                    b.HasOne("MesMicroservice.Domain.AggregateModels.Resource", null)
                        .WithOne()
                        .HasForeignKey("MesMicroservice.Domain.AggregateModels.EquipmentAggregate.Equipment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("MesMicroservice.Domain.AggregateModels.EquipmentAggregate.EquipmentProperty", "Properties", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<int>("EquipmentId")
                                .HasColumnType("int");

                            b1.Property<string>("PropertyId")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("ValueUnitOfMeasure")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("Id");

                            b1.HasIndex("EquipmentId", "PropertyId")
                                .IsUnique();

                            b1.ToTable("EquipmentProperty");

                            b1.WithOwner()
                                .HasForeignKey("EquipmentId");

                            b1.OwnsOne("MesMicroservice.Domain.AggregateModels.Value", "Value", b2 =>
                                {
                                    b2.Property<int>("EquipmentPropertyId")
                                        .HasColumnType("int");

                                    b2.Property<string>("ValueString")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<int>("ValueType")
                                        .HasColumnType("int");

                                    b2.HasKey("EquipmentPropertyId");

                                    b2.ToTable("EquipmentProperty");

                                    b2.WithOwner()
                                        .HasForeignKey("EquipmentPropertyId");
                                });

                            b1.Navigation("Value")
                                .IsRequired();
                        });

                    b.Navigation("EquipmentClass");

                    b.Navigation("HierarchyModel");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.EquipmentClassAggregate.EquipmentClass", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.Resource", null)
                        .WithOne()
                        .HasForeignKey("MesMicroservice.Domain.AggregateModels.EquipmentClassAggregate.EquipmentClass", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.MaterialClassAggregate.MaterialClass", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.Resource", null)
                        .WithOne()
                        .HasForeignKey("MesMicroservice.Domain.AggregateModels.MaterialClassAggregate.MaterialClass", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.MaterialDefinition", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.Resource", null)
                        .WithOne()
                        .HasForeignKey("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.MaterialDefinition", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.MaterialClassAggregate.MaterialClass", "MaterialClass")
                        .WithMany("MaterialDefinitions")
                        .HasForeignKey("MaterialClassId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsMany("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.MaterialDefinitionProperty", "Properties", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("nvarchar(500)");

                            b1.Property<int>("MaterialDefinitionId")
                                .HasColumnType("int");

                            b1.Property<string>("PropertyId")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)");

                            b1.Property<string>("ValueUnitOfMeasure")
                                .IsRequired()
                                .HasMaxLength(30)
                                .HasColumnType("nvarchar(30)");

                            b1.HasKey("Id");

                            b1.HasIndex("MaterialDefinitionId", "PropertyId")
                                .IsUnique();

                            b1.ToTable("MaterialDefinitionProperty");

                            b1.WithOwner()
                                .HasForeignKey("MaterialDefinitionId");

                            b1.OwnsOne("MesMicroservice.Domain.AggregateModels.Value", "Value", b2 =>
                                {
                                    b2.Property<int>("MaterialDefinitionPropertyId")
                                        .HasColumnType("int");

                                    b2.Property<string>("ValueString")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<int>("ValueType")
                                        .HasColumnType("int");

                                    b2.HasKey("MaterialDefinitionPropertyId");

                                    b2.ToTable("MaterialDefinitionProperty");

                                    b2.WithOwner()
                                        .HasForeignKey("MaterialDefinitionPropertyId");
                                });

                            b1.Navigation("Value")
                                .IsRequired();
                        });

                    b.Navigation("MaterialClass");

                    b.Navigation("Properties");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.MaterialLotAggregate.MaterialLot", b =>
                {
                    b.HasOne("MesMicroservice.Domain.AggregateModels.Resource", null)
                        .WithOne()
                        .HasForeignKey("MesMicroservice.Domain.AggregateModels.MaterialLotAggregate.MaterialLot", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.MaterialDefinition", "MaterialDefinition")
                        .WithMany("MaterialLots")
                        .HasForeignKey("MaterialDefinitionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.MaterialUnit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialDefinition");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.HierarchyModel", b =>
                {
                    b.Navigation("AssociatedEquipments");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.ManufacturingOrderAggregate.ManufacturingOrder", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.Operation", b =>
                {
                    b.Navigation("EquipmentRequirements");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.WorkOrderAggregate.WorkOrder", b =>
                {
                    b.Navigation("AssignedEquipments");

                    b.Navigation("EquipmentRequirements");

                    b.Navigation("ManufacturingRecords");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.Area", b =>
                {
                    b.Navigation("WorkCenters");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.Enterprise", b =>
                {
                    b.Navigation("Sites");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.Site", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.HierarchyModelAggregate.WorkCenter", b =>
                {
                    b.Navigation("Outputs");

                    b.Navigation("WorkUnits");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.EquipmentClassAggregate.EquipmentClass", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.MaterialClassAggregate.MaterialClass", b =>
                {
                    b.Navigation("MaterialDefinitions");
                });

            modelBuilder.Entity("MesMicroservice.Domain.AggregateModels.MaterialDefinitionAggregate.MaterialDefinition", b =>
                {
                    b.Navigation("MaterialLots");

                    b.Navigation("Operations");

                    b.Navigation("SecondaryUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
